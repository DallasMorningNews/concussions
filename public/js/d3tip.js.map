{"version":3,"sources":["d3tip.js"],"names":["root","factory","define","amd","module","exports","d3Collection","require","d3Selection","d3","tip","this","vis","svg","getSVGNode","point","createSVGPoint","document","body","appendChild","node","d3TipDirection","d3TipOffset","d3TipHTML","directionNorth","bbox","getScreenBBox","top","n","y","offsetHeight","left","x","offsetWidth","directionSouth","s","directionEast","e","directionWest","w","directionNorthWest","nw","directionNorthEast","ne","directionSouthWest","sw","directionSouthEast","se","initNode","div","select","createElement","style","element","svgNode","tagName","toLowerCase","ownerSVGElement","getNodeEl","targetel","target","event","getScreenCTM","parentNode","matrix","tbbox","getBBox","width","height","matrixTransform","functor","v","direction","offset","html","show","args","Array","prototype","slice","call","arguments","length","SVGElement","pop","coords","content","apply","poffset","dir","nodel","i","directions","scrollTop","documentElement","scrollLeft","classed","directionCallbacks","get","hide","attr","selection","destroy","remove","map","keys"],"mappings":"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","file":"d3tip.js","sourcesContent":["/**\n * d3.tip\n * Copyright (c) 2013 Justin Palmer\n *\n * Tooltips for d3.js SVG visualizations\n */\n// eslint-disable-next-line no-extra-semi\n;(function(root, factory) {\n  if (typeof define === 'function' && define.amd) {\n    // AMD. Register as an anonymous module with d3 as a dependency.\n    define([\n      'd3-collection',\n      'd3-selection'\n    ], factory)\n  } else if (typeof module === 'object' && module.exports) {\n    /* eslint-disable global-require */\n    // CommonJS\n    var d3Collection = require('d3-collection'),\n        d3Selection = require('d3-selection')\n    module.exports = factory(d3Collection, d3Selection)\n    /* eslint-enable global-require */\n  } else {\n    // Browser global.\n    var d3 = root.d3\n    // eslint-disable-next-line no-param-reassign\n    root.d3.tip = factory(d3, d3)\n  }\n}(this, function(d3Collection, d3Selection) {\n  // Public - contructs a new tooltip\n  //\n  // Returns a tip\n  return function() {\n    var direction = d3TipDirection,\n        offset    = d3TipOffset,\n        html      = d3TipHTML,\n        node      = initNode(),\n        svg       = null,\n        point     = null,\n        target    = null\n\n    function tip(vis) {\n      svg = getSVGNode(vis)\n      if (!svg) return\n      point = svg.createSVGPoint()\n      document.body.appendChild(node)\n    }\n\n    // Public - show the tooltip on the screen\n    //\n    // Returns a tip\n    tip.show = function() {\n      var args = Array.prototype.slice.call(arguments)\n      if (args[args.length - 1] instanceof SVGElement) target = args.pop()\n\n      var content = html.apply(this, args),\n          poffset = offset.apply(this, args),\n          dir     = direction.apply(this, args),\n          nodel   = getNodeEl(),\n          i       = directions.length,\n          coords,\n          scrollTop  = document.documentElement.scrollTop ||\n            document.body.scrollTop,\n          scrollLeft = document.documentElement.scrollLeft ||\n            document.body.scrollLeft\n\n      nodel.html(content)\n        .style('opacity', 1).style('pointer-events', 'all')\n\n      while (i--) nodel.classed(directions[i], false)\n      coords = directionCallbacks.get(dir).apply(this)\n      nodel.classed(dir, true)\n        .style('top', (coords.top + poffset[0]) + scrollTop + 'px')\n        .style('left', (coords.left + poffset[1]) + scrollLeft + 'px')\n\n      return tip\n    }\n\n    // Public - hide the tooltip\n    //\n    // Returns a tip\n    tip.hide = function() {\n      var nodel = getNodeEl()\n      nodel.style('opacity', 0).style('pointer-events', 'none')\n      return tip\n    }\n\n    // Public: Proxy attr calls to the d3 tip container.\n    // Sets or gets attribute value.\n    //\n    // n - name of the attribute\n    // v - value of the attribute\n    //\n    // Returns tip or attribute value\n    // eslint-disable-next-line no-unused-vars\n    tip.attr = function(n, v) {\n      if (arguments.length < 2 && typeof n === 'string') {\n        return getNodeEl().attr(n)\n      }\n\n      var args =  Array.prototype.slice.call(arguments)\n      d3Selection.selection.prototype.attr.apply(getNodeEl(), args)\n      return tip\n    }\n\n    // Public: Proxy style calls to the d3 tip container.\n    // Sets or gets a style value.\n    //\n    // n - name of the property\n    // v - value of the property\n    //\n    // Returns tip or style property value\n    // eslint-disable-next-line no-unused-vars\n    tip.style = function(n, v) {\n      if (arguments.length < 2 && typeof n === 'string') {\n        return getNodeEl().style(n)\n      }\n\n      var args = Array.prototype.slice.call(arguments)\n      d3Selection.selection.prototype.style.apply(getNodeEl(), args)\n      return tip\n    }\n\n    // Public: Set or get the direction of the tooltip\n    //\n    // v - One of n(north), s(south), e(east), or w(west), nw(northwest),\n    //     sw(southwest), ne(northeast) or se(southeast)\n    //\n    // Returns tip or direction\n    tip.direction = function(v) {\n      if (!arguments.length) return direction\n      direction = v == null ? v : functor(v)\n\n      return tip\n    }\n\n    // Public: Sets or gets the offset of the tip\n    //\n    // v - Array of [x, y] offset\n    //\n    // Returns offset or\n    tip.offset = function(v) {\n      if (!arguments.length) return offset\n      offset = v == null ? v : functor(v)\n\n      return tip\n    }\n\n    // Public: sets or gets the html value of the tooltip\n    //\n    // v - String value of the tip\n    //\n    // Returns html value or tip\n    tip.html = function(v) {\n      if (!arguments.length) return html\n      html = v == null ? v : functor(v)\n\n      return tip\n    }\n\n    // Public: destroys the tooltip and removes it from the DOM\n    //\n    // Returns a tip\n    tip.destroy = function() {\n      if (node) {\n        getNodeEl().remove()\n        node = null\n      }\n      return tip\n    }\n\n    function d3TipDirection() { return 'n' }\n    function d3TipOffset() { return [0, 0] }\n    function d3TipHTML() { return ' ' }\n\n    var directionCallbacks = d3Collection.map({\n          n:  directionNorth,\n          s:  directionSouth,\n          e:  directionEast,\n          w:  directionWest,\n          nw: directionNorthWest,\n          ne: directionNorthEast,\n          sw: directionSouthWest,\n          se: directionSouthEast\n        }),\n        directions = directionCallbacks.keys()\n\n    function directionNorth() {\n      var bbox = getScreenBBox()\n      return {\n        top:  bbox.n.y - node.offsetHeight,\n        left: bbox.n.x - node.offsetWidth / 2\n      }\n    }\n\n    function directionSouth() {\n      var bbox = getScreenBBox()\n      return {\n        top:  bbox.s.y,\n        left: bbox.s.x - node.offsetWidth / 2\n      }\n    }\n\n    function directionEast() {\n      var bbox = getScreenBBox()\n      return {\n        top:  bbox.e.y - node.offsetHeight / 2,\n        left: bbox.e.x\n      }\n    }\n\n    function directionWest() {\n      var bbox = getScreenBBox()\n      return {\n        top:  bbox.w.y - node.offsetHeight / 2,\n        left: bbox.w.x - node.offsetWidth\n      }\n    }\n\n    function directionNorthWest() {\n      var bbox = getScreenBBox()\n      return {\n        top:  bbox.nw.y - node.offsetHeight,\n        left: bbox.nw.x - node.offsetWidth\n      }\n    }\n\n    function directionNorthEast() {\n      var bbox = getScreenBBox()\n      return {\n        top:  bbox.ne.y - node.offsetHeight,\n        left: bbox.ne.x\n      }\n    }\n\n    function directionSouthWest() {\n      var bbox = getScreenBBox()\n      return {\n        top:  bbox.sw.y,\n        left: bbox.sw.x - node.offsetWidth\n      }\n    }\n\n    function directionSouthEast() {\n      var bbox = getScreenBBox()\n      return {\n        top:  bbox.se.y,\n        left: bbox.se.x\n      }\n    }\n\n    function initNode() {\n      var div = d3Selection.select(document.createElement('div'))\n      div\n        .style('position', 'absolute')\n        .style('top', 0)\n        .style('opacity', 0)\n        .style('pointer-events', 'none')\n        .style('box-sizing', 'border-box')\n\n      return div.node()\n    }\n\n    function getSVGNode(element) {\n      var svgNode = element.node()\n      if (!svgNode) return null\n      if (svgNode.tagName.toLowerCase() === 'svg') return svgNode\n      return svgNode.ownerSVGElement\n    }\n\n    function getNodeEl() {\n      if (node == null) {\n        node = initNode()\n        // re-add node to DOM\n        document.body.appendChild(node)\n      }\n      return d3Selection.select(node)\n    }\n\n    // Private - gets the screen coordinates of a shape\n    //\n    // Given a shape on the screen, will return an SVGPoint for the directions\n    // n(north), s(south), e(east), w(west), ne(northeast), se(southeast),\n    // nw(northwest), sw(southwest).\n    //\n    //    +-+-+\n    //    |   |\n    //    +   +\n    //    |   |\n    //    +-+-+\n    //\n    // Returns an Object {n, s, e, w, nw, sw, ne, se}\n    function getScreenBBox() {\n      var targetel   = target || d3Selection.event.target\n\n      while (targetel.getScreenCTM == null && targetel.parentNode == null) {\n        targetel = targetel.parentNode\n      }\n\n      var bbox       = {},\n          matrix     = targetel.getScreenCTM(),\n          tbbox      = targetel.getBBox(),\n          width      = tbbox.width,\n          height     = tbbox.height,\n          x          = tbbox.x,\n          y          = tbbox.y\n\n      point.x = x\n      point.y = y\n      bbox.nw = point.matrixTransform(matrix)\n      point.x += width\n      bbox.ne = point.matrixTransform(matrix)\n      point.y += height\n      bbox.se = point.matrixTransform(matrix)\n      point.x -= width\n      bbox.sw = point.matrixTransform(matrix)\n      point.y -= height / 2\n      bbox.w = point.matrixTransform(matrix)\n      point.x += width\n      bbox.e = point.matrixTransform(matrix)\n      point.x -= width / 2\n      point.y -= height / 2\n      bbox.n = point.matrixTransform(matrix)\n      point.y += height\n      bbox.s = point.matrixTransform(matrix)\n\n      return bbox\n    }\n\n    // Private - replace D3JS 3.X d3.functor() function\n    function functor(v) {\n      return typeof v === 'function' ? v : function() {\n        return v\n      }\n    }\n\n    return tip\n  }\n// eslint-disable-next-line semi\n}));\n"],"sourceRoot":"/source/"}